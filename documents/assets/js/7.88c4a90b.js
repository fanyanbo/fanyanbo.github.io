(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{182:function(t,a,e){"use strict";e.r(a);var s=e(0),v=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"git开发规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git开发规范","aria-hidden":"true"}},[t._v("#")]),t._v(" GIT开发规范")]),t._v(" "),e("h2",{attrs:{id:"设置和初始化工作："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置和初始化工作：","aria-hidden":"true"}},[t._v("#")]),t._v(" 设置和初始化工作：")]),t._v(" "),e("p",[t._v("全局编码设置：\n统一采用utf-8，  请检查自己的编码，编码不一致可能会导致没实际上没更改的文档也会显示为更新。\n查看设置：git config -l")]),t._v(" "),e("p",[e("strong",[t._v("设置编码：")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global gui.encoding utf-8\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global i18n.commitencoding utf-8\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global i18n.logoutputencoding utf-8\n")])])]),e("p",[e("strong",[t._v("设置用户名和email：")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name admin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("自己的gitlab用户名）\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email admin@inspiry.cn\n")])])]),e("h2",{attrs:{id:"开发流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),e("h3",{attrs:{id:"项目分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目分支")]),t._v(" "),e("p",[t._v("一般来说，互联网项目有线上/预上线分支（master），测试分支（stable），开发分支（dev）等．")]),t._v(" "),e("p",[t._v("保证不同的分支做不同的事情，防止分支污染。")]),t._v(" "),e("ol",[e("li",[t._v("线上/预上线分支（"),e("strong",[t._v("master")]),t._v("）：是预上线环境和线上环境的分支，以这个分支为准，其他分支都是以这个分支为基础拉取。")]),t._v(" "),e("li",[t._v("测试分支（"),e("strong",[t._v("stable")]),t._v("）：测试环境分支，是给测试团队测试使用，如果有些功能在本地及开发不容易测试，开发人员可以测试分支进行自测。")]),t._v(" "),e("li",[t._v("开发分支（"),e("strong",[t._v("dev")]),t._v("）：开发人员自测。")])]),t._v(" "),e("h3",{attrs:{id:"开发流程-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发流程-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),e("p",[t._v("步骤：")]),t._v(" "),e("ol",[e("li",[t._v("第一步，新需求或BUG，从上线分支拉取一个开发分支。")]),t._v(" "),e("li",[t._v("第二步，在开发分支进行开发，自测。")]),t._v(" "),e("li",[t._v("第三步，合并到测试分支，通知QA测试。")]),t._v(" "),e("li",[t._v("第四步，如果通过测试，合并到master，然后继续测试。如果不通过测试，进入第二步。")]),t._v(" "),e("li",[t._v("第五步，如果预上线测试通过，将预上线tag 直接部署到线上。如果不通过测试，进入第二步。")]),t._v(" "),e("li",[t._v("第六步，上线，然后线上测试。如果通过测试，那么这个需求开发就结束了。如果没有通过测试，就回归上一版本，然后进入第二步。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://s1.ax1x.com/2018/02/11/9GhJYR.png",alt:"img"}})]),t._v(" "),e("p",[t._v("当遇到一个新需求或者更改BUG时，必须重新建立分支")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取主干最新代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个开发分支myfeature并切换到这个分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b myfeature\n")])])]),e("p",[t._v("当修改完毕后，提交分支")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看发生变动的文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存所有变化（包括新建、修改和删除）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撰写提交信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修改样式错位"')]),t._v("\n")])])]),e("p",[t._v("将本地分支推送至远程仓库  提交后合并到stable 提测")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到stable分支 合并")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout stable\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge myfeature\n")])])]),e("p",[t._v("如果通过测试则合并到master，去公司的git地址创建合并请求，等待master管理员合并\n未通过测试，则继续修改重新测试")]),t._v(" "),e("h2",{attrs:{id:"命令汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令汇总","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令汇总")]),t._v(" "),e("p",[t._v("git config配置本地仓库")]),t._v(" "),e("p",[t._v("常用git config --global user.name、git config --global user.email")]),t._v(" "),e("p",[t._v("git config --list查看配置详情")]),t._v(" "),e("p",[t._v("git init 初始一个仓库，添加--bare可以初始化一个共享（裸）仓库")]),t._v(" "),e("p",[t._v("git status 可以查看当前仓库的状态")]),t._v(" "),e("p",[t._v('git add"文件" 将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、"*"、-A')]),t._v(" "),e("p",[t._v("git commit -m “备注信息' 将暂存区的文件，提交到本地仓库")]),t._v(" "),e("p",[t._v("git log 可以查看本地仓库的提交历史")]),t._v(" "),e("p",[t._v("git branch查看分支")]),t._v(" "),e("p",[t._v('git branch"分支名称" 创建一个新的分支')]),t._v(" "),e("p",[t._v('git checkout"分支名称" 切换分支')]),t._v(" "),e("p",[t._v("git checkout -b deeveloper 新建并切到developer分支")]),t._v(" "),e("p",[t._v('git merge"分支名称" 合并分支')]),t._v(" "),e("p",[t._v('git branch -d "分支名称" 删除分支')]),t._v(" "),e("p",[t._v('git clone "仓库地址"获取已有仓库的副本')]),t._v(" "),e("p",[t._v('git push origin "本地分支名称:远程分支名称"将本地分支推送至远程仓库，')]),t._v(" "),e("p",[t._v("git push origin hotfix（通常的写法）相当于")]),t._v(" "),e("p",[t._v("git push origin hotfix:hotfix")]),t._v(" "),e("p",[t._v("git push origin hotfix:newfeature")]),t._v(" "),e("p",[t._v('本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push "仓库地址" "分支名称"，如果远程仓库没有对应分支，将会自动创建')]),t._v(" "),e("p",[t._v('git remote add "主机名称" "远程仓库地址"添加远程主机，即给远程主机起个别名，方便使用')]),t._v(" "),e("p",[t._v("git remote 可以查看已添加的远程主机")]),t._v(" "),e("p",[t._v('git remote show "主机名称"可以查看远程主机的信息')]),t._v(" "),e("h2",{attrs:{id:"gitlib权限管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlib权限管理","aria-hidden":"true"}},[t._v("#")]),t._v(" GitLib权限管理")]),t._v(" "),e("p",[t._v("GitLib有五种身份权限，分别是：")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("Owner 项目所有者，拥有所有的操作权限")]),t._v(" "),e("li",[t._v("Master 项目的管理者，除更改、删除项目元信息外其它操作均可")]),t._v(" "),e("li",[t._v("Developer 项目的开发人员，做一些开发工作，对受保护内容无权限")]),t._v(" "),e("li",[t._v("Reporter 项目的报告者，只有项目的读权限，可以创建代码片断")]),t._v(" "),e("li",[t._v("Guest 项目的游客，只能提交问题和评论内容")])])]),t._v(" "),e("p",[t._v("具体参见GitLab权限，为项目添加成员时可指定成员的身份权限")]),t._v(" "),e("h2",{attrs:{id:"git高级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git高级","aria-hidden":"true"}},[t._v("#")]),t._v(" Git高级")]),t._v(" "),e("p",[t._v("熟悉掌握以上操作，基本上是可以满足日常开的需要的，但是在解决一些特殊问题时，就又需要我们能够掌握更多的命令。")]),t._v(" "),e("h3",{attrs:{id:"git-ignore忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-ignore忽略文件","aria-hidden":"true"}},[t._v("#")]),t._v(" git ignore忽略文件")]),t._v(" "),e("p",[t._v("在项目根目录下创建一个.gitignore文件，可以将不希望提交的罗列在这个文件里，如项目的配置文件、node_modules等")]),t._v(" "),e("p",[t._v("https://github.com/github/gitignore")]),t._v(" "),e("h3",{attrs:{id:"比较差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较差异","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较差异")]),t._v(" "),e("p",[t._v("当内容被修改，我们无法确定修改哪些内容时，可以通过git diff来进行差异比较。")]),t._v(" "),e("p",[t._v("git difftool 比较的是工作区和暂存的差异")]),t._v(" "),e("p",[t._v('git difftool "SHA"比较与特定提交的差异')]),t._v(" "),e("p",[t._v('git difftool "SHA""SHA"比较某两次提交的差异')]),t._v(" "),e("p",[t._v("git difftool 分支名称 比较与某个分支的差异")]),t._v(" "),e("p",[e("strong",[t._v("回滚（撤销）操作")])]),t._v(" "),e("p",[t._v('HEAD 默认指向当前分支的"末端"，即最后的一次提交，但是我们通过git reset 可以改变HEAD的指向。')]),t._v(" "),e("p",[e("strong",[t._v("稍微复杂一些，理解就好")])]),t._v(" "),e("p",[t._v("1、git reset")]),t._v(" "),e("p",[t._v("--hard 工作区会变、历史(HEAD)会变， 暂存区也变")]),t._v(" "),e("p",[t._v("--soft 只会变历史(HEAD)")]),t._v(" "),e("p",[t._v("--mixed（默认是这个选项）历史(HEAD)会变、暂存区也变，工作区不变")]),t._v(" "),e("p",[t._v("2、git checkout")]),t._v(" "),e("p",[t._v('git checkout SHA -- "某个文件"，代表只是从SHA这个版中取出特定的文件，')]),t._v(" "),e("p",[t._v("和git reset 是有区别的，reset 重写了历史，checkout 则没有。")]),t._v(" "),e("h3",{attrs:{id:"更新仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 更新仓库")]),t._v(" "),e("p",[t._v("在项目开发过程中，经常性的会遇到远程（共享）仓库和本地仓库不一致，我们可以通过git fetch 命令来更新本地仓库，使本地仓库和远程（共享）仓库保持一致。")]),t._v(" "),e("p",[t._v('git fetch  "远程主机"')]),t._v(" "),e("p",[t._v("或者")]),t._v(" "),e("p",[t._v('git fetch "远程主机" "分支名称"')]),t._v(" "),e("p",[t._v("我们要注意的是，利用git fetch 获取的更新会保存在本地仓库中，但是并没有体现到我们的工作目录中，需要我们再次利用git merge来将对应的分支合并（融合）到特定分支。如下")]),t._v(" "),e("p",[t._v("git pull origin 某个分支， 上操作相当于下面两步")]),t._v(" "),e("p",[t._v("git fetch")]),t._v(" "),e("p",[t._v("git merge origin/某个分支")]),t._v(" "),e("p",[e("strong",[t._v("查看远程主机上总共有多少个分支")])]),t._v(" "),e("p",[t._v("git branch -a 便可以查看所有(本地+远程仓库)分支了")]),t._v(" "),e("h3",{attrs:{id:"其它"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它","aria-hidden":"true"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),e("p",[t._v("删除远程分支git push origin --delete 分支名称")]),t._v(" "),e("p",[t._v("删除远程分支git push origin :分支名称")])])}],!1,null,null,null);a.default=v.exports}}]);